doctype html
html(lang="es")
  head
    meta(charset="UTF-8")
    meta(name="viewport", content="width=device-width, initial-scale=1.0")
    title Dashboard
    link(rel="stylesheet", href="/stylesheets/modal.css")
    link(rel="stylesheet", href="/stylesheets/inicio.css")
    link(href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap", rel="stylesheet")
    link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css")
  body
    header
      nav
        img(src="images/logo.png", alt="Logo", class="logo")
        ul
          li: a(href="#") Inicio
          li: a(href="/planes") Planes de Ahorro
        .language
          span Español (Latinoamerica)
          #userInfo
            i(class="fas fa-user-circle", style="cursor:pointer", id)
          i(class="fas as fa-sign-out-alt", style="cursor:pointer", onclick="window.location.href='/'")
    main
      section.overview
        div(class="card balance", id="balance")
          br
          h3 Balance
          p.balance_p $0.0
          hr
          p 
            | Cuentas Asociadas 
            i(class="fas fa-caret-down")
          .accounts
            .montos_contenedor
              p 
                .info_cuenta
                  img(src="https://www.paredro.com/wp-content/uploads/2019/04/https___www.bbva_.com_wp-content_uploads_2019_04_Logo-BBVA.jpg", alt="BBVA") 
                  | BBVA Bancomer 
                  .monto_cuenta $0.0
            .montos_contenedor
              p 
                .info_cuenta
                  img(src="https://belvo.com/wp-content/uploads/2023/07/mercado-pago-logo.png", alt="Mercado Pago")
                  | Mercado Pago
                  .monto_cuenta $0.0
        .card.ingresos
          h3 Ingresos
          #chart
        .card.gastos
          h3 Gastos
          #chart2
      hr
      section.news
        h2 Noticias
        .news-cards
          each article in articles
            .news-card 
              p #{article.titulo}
              p #{article.autor}
              p #{article.fecha}
              a(href=article.url) Visita ya!

    .modal#bankDetailsModal
      .modal-content.card.balance
        span.close-button &times;
        br
        h3 Balance
        p.balance_p $0.0
        hr
        p 
          | Cuentas Asociadas 
          i(class="fas fa-caret-down")
        .accounts
          .montos_contenedor
            p 
              .info_cuenta
                img(src="https://www.paredro.com/wp-content/uploads/2019/04/https___www.bbva_.com_wp-content_uploads_2019_04_Logo-BBVA.jpg", alt="BBVA") 
                | BBVA Bancomer 
                .monto_cuenta $0.0
          .montos_contenedor
            p 
              .info_cuenta
                img(src="https://belvo.com/wp-content/uploads/2023/07/mercado-pago-logo.png", alt="Mercado Pago")
                | Mercado Pago
                .monto_cuenta $0.0
    .modal#userDetailsModal
      .modal-content
        span.close-button &times;
        h2 Perfil
        p Nombre: Ángel Alfredo Duron Quieoz
        p Email: angel_freddy@yahoo.com

    script(src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js")
    script(src="https://d3js.org/d3.v7.min.js")

    script.
      window.addEventListener('DOMContentLoaded', function(event) {
        event.preventDefault();
        axios.post('/getDogtaChart', { link: '8f2a3069-928c-4a52-800e-0229f3e96176' })
          .then(response => {
            var transactions = response.data;
            const inflows = [];
            const outflows = [];

            transactions.forEach(transaction => {
              if (transaction.type === 'INFLOW') {
                inflows.push(transaction);
              }
            });

            transactions.forEach(transaction => {
              if (transaction.type === 'OUTFLOW') {
                outflows.push(transaction);
              }
            });
            generateChart(inflows, "#chart")
            generateChart(outflows, "#chart2")
          })
          .catch(error => console.error('Error:', error));
      });
script.
  function generateChart (data, id_container) {
    data = categorizeAndSumByMonth(data)
      const margin = {top: 20, right: 30, bottom: 30, left: 40},
          width = 325 - margin.left - margin.right,
          height = 150 - margin.top - margin.bottom;

    const parseDate = d3.timeParse("%Y-%m-%d");
  
    data.forEach(d => {
      d.month = (d.month);
      d.total_amount = +d.total_amount;
    });

    const x = d3.scaleTime()
                .domain(d3.extent(data, d => d.month))
                .range([0, width]);

    const y = d3.scaleLinear()
                .domain([0, d3.max(data, d => d.total_amount)])
                .range([height, 0]);

    const area = d3.area()
                    .x(d => x(d.month))
                    .y0(height)
                    .y1(d => y(d.total_amount));

    const svg = d3.select(id_container).append("svg")
                  .attr("width", width + margin.left + margin.right)
                  .attr("height", height + margin.top + margin.bottom)
                  .append("g")
                  .attr("transform", `translate(${margin.left},${margin.top})`);

    svg.append("path")
        .datum(data)
        .attr("class", "area")
        .attr("d", area);

    svg.append("g")
        .attr("class", "axis axis--x")
        .attr("transform", `translate(0,${height})`)
        .call(d3.axisBottom(x));

    svg.append("g")
        .attr("class", "axis axis--y")
        .call(d3.axisLeft(y));
  }
  function categorizeAndSumByMonth(data) {
    const result = {};

    data.forEach(item => {
      const date = new Date(item.value_date);
      const month = date.getMonth() + 1; // Months are zero-based, so add 1

      if (!result[month]) {
        result[month] = {
          month: month,
          total_amount: 0
        };
      }

      result[month].total_amount += item.amount;
    });

    const resultArray = Object.values(result);

    // Ordenar de menor a mayor por mes
    resultArray.sort((a, b) => a.month - b.month);

    return resultArray;
  }

script.
  document.addEventListener('DOMContentLoaded', (event) => {
    // Bank Details Modal
    const bankModal = document.getElementById('bankDetailsModal');
    const openBankModalButton = document.getElementById('balance');
    const bankCloseButton = bankModal.querySelector('.close-button');

    openBankModalButton.onclick = function() {
      bankModal.style.display = "block";
    }

    bankCloseButton.onclick = function() {
      bankModal.style.display = "none";
    }

    window.onclick = function(event) {
      if (event.target == bankModal) {
        bankModal.style.display = "none";
      }
    }

    // User Details Modal
    const userModal = document.getElementById('userDetailsModal');
    const openUserModalButton = document.getElementById('userInfo');
    const userCloseButton = userModal.querySelector('.close-button');

    openUserModalButton.onclick = function() {
      userModal.style.display = "block";
    }

    userCloseButton.onclick = function() {
      userModal.style.display = "none";
    }

    window.onclick = function(event) {
      if (event.target == userModal) {
        userModal.style.display = "none";
      }
    }
  });

